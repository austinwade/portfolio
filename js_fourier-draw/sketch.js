"use strict"

class Complex {
    constructor(a, b) {
        this.re = a;
        this.im = b;
    }
    add(c) {
        this.re += c.re;
        this.im += c.im;
    }
    mult(c) {
        const re = this.re * c.re - this.im * c.im;
        const im = this.re * c.im + this.im * c.re;
        return new Complex(re, im);
    }
}
function dft(x) {
    for (let i = 1 + skip; i <= x.length; i += 1 + skip) x.splice(i, 1);
    const X = [];
    const N = x.length;
    for (let k = 0; k < N; k++) {
        let sum = new Complex(0, 0);
        for (let n = 0; n < N; n++) {
            const phi = (k * n) * TWO_PI / N;
            const c = new Complex(Math.cos(phi), -Math.sin(phi));
            sum.add(x[n].mult(c));
        }
        sum.re = sum.re / N;
        sum.im = sum.im / N;
        let freq = k;
        let amp = Math.sqrt(sum.re * sum.re + sum.im * sum.im);
        let phase = Math.atan2(sum.im, sum.re);
        X[k] = { re: sum.re, im: sum.im, freq, amp, phase };
    }
    return X;
}

















let canvas = document.getElementById('drawHere');

let setSizing = () => {
    canvas.width = window.innerWidth * 2;
    canvas.height = window.innerHeight * 2;
    canvas.style.width = (canvas.width / 2) + "px";
    canvas.style.height = (canvas.height / 2) + "px";
}
setSizing()

let ctx = canvas.getContext('2d')
ctx.scale(2, 2)

const USER = 0;
const FOURIER = 1;
const TWO_PI = 3.14159265359 * 2

let complex_points = [];
let fourier;
let time = 0;
let path = [];
let drawing = [];
let state = USER;
let blackVal = 1

let isDrawing = false;
let interval
let skip = 0
let timeInterval = 200
let touched = false

ctx.lineWidth = 0.5

function reset() {
    black()
    state = USER;
    drawing = [];
    complex_points = [];
    time = 0;
    path = [];
}
window.onresize = reset

function elongate() {
    console.log("elongating")
    if (skip) {
        let drawing2 = JSON.parse(JSON.stringify(drawing))
        for (let i=0;i<drawing.length;i+=1) {
            let newOne = [ (drawing[(i+1)%(drawing.length)][0]+drawing[i][0])/2 , (drawing[(i+1)%(drawing.length)][1]+drawing[i][1])/2 ]
            drawing2.push(newOne)
        }
        drawing = JSON.parse(JSON.stringify(drawing2))
    }
}
function runFourier() {
    elongate()
    complex_points = []
    for (let i = 0; i < drawing.length; i += 1) complex_points.push(new Complex(drawing[i][0] - window.innerWidth / 2, drawing[i][1] - window.innerHeight / 2));
    fourier = dft(complex_points);
    fourier.sort((a, b) => b.amp - a.amp);
}
function runDrawing() {
    isDrawing = false;
    state = FOURIER;
    runFourier()
    interval = setInterval(draw, timeInterval)
}
// initial drawing
drawing = [[601,617],[601,617],[599,617],[597,617],[595,617],[592,617],[590,618],[586,619],[583,620],[580,621],[572,623],[569,624],[566,624],[562,625],[560,626],[555,627],[548,629],[540,630],[537,631],[531,631],[530,632],[525,633],[519,635],[516,635],[507,638],[502,638],[495,639],[488,641],[480,642],[471,645],[460,646],[451,647],[423,648],[412,648],[401,648],[392,648],[371,647],[360,647],[349,646],[338,644],[327,643],[321,641],[310,640],[294,636],[285,634],[277,631],[270,629],[265,626],[258,623],[251,621],[245,619],[239,617],[227,613],[224,612],[217,610],[206,608],[202,606],[199,605],[192,602],[187,598],[185,597],[183,595],[181,592],[179,590],[177,588],[174,585],[172,582],[165,570],[163,567],[161,564],[158,558],[156,555],[154,549],[147,537],[144,531],[142,524],[138,519],[136,512],[131,498],[124,477],[121,471],[119,462],[116,451],[114,442],[112,433],[111,425],[107,415],[104,401],[100,386],[96,374],[95,369],[94,365],[92,351],[91,342],[91,336],[91,333],[90,328],[90,322],[90,317],[90,313],[90,308],[90,304],[90,299],[91,290],[92,285],[93,282],[95,276],[97,269],[99,263],[102,257],[105,251],[109,243],[114,235],[118,226],[128,209],[134,201],[138,194],[148,180],[151,177],[156,169],[159,166],[164,161],[167,159],[170,157],[178,151],[180,151],[183,149],[186,148],[193,146],[197,145],[202,143],[207,142],[212,141],[219,140],[223,139],[231,138],[245,135],[254,133],[261,132],[269,130],[278,128],[289,126],[298,124],[306,122],[313,120],[322,118],[331,117],[339,116],[348,114],[352,113],[363,112],[366,111],[373,110],[379,109],[384,108],[388,108],[391,107],[397,107],[399,107],[404,107],[407,107],[412,107],[414,107],[421,107],[425,107],[429,109],[432,110],[437,111],[443,114],[446,116],[449,118],[454,122],[456,125],[461,130],[465,134],[470,140],[474,146],[478,152],[482,157],[488,165],[492,171],[499,179],[504,187],[509,193],[515,200],[520,208],[525,214],[530,222],[534,227],[537,233],[542,240],[546,246],[550,252],[555,260],[557,266],[560,271],[564,277],[566,282],[571,290],[573,295],[579,309],[582,315],[585,321],[590,334],[592,341],[594,348],[595,356],[597,363],[600,383],[601,392],[601,400],[601,411],[601,422],[601,443],[598,454],[595,464],[592,473],[589,480],[587,484],[584,490],[582,496],[580,501],[578,505],[577,508],[575,512],[573,515],[572,517],[571,520],[569,523],[567,524],[566,527],[564,529],[563,530],[561,532],[560,534],[559,535],[558,536],[556,538],[554,540],[551,542],[549,544],[544,548],[537,553],[531,558],[524,563],[516,568],[505,575],[499,578],[496,579],[492,581],[488,582],[484,582],[482,583],[478,583],[474,584],[470,584],[461,584],[458,584],[455,584],[450,584],[444,583],[441,583],[435,582],[427,581],[420,580],[414,579],[406,577],[399,576],[390,575],[383,574],[378,573],[368,571],[357,568],[352,566],[345,565],[338,562],[333,561],[328,559],[323,556],[309,548],[304,545],[301,543],[297,541],[290,535],[286,533],[283,530],[278,526],[272,523],[269,521],[266,518],[262,516],[260,514],[256,511],[253,509],[247,503],[244,501],[242,497],[235,488],[234,486],[232,482],[229,477],[228,472],[226,468],[224,461],[223,456],[219,439],[218,435],[216,428],[215,423],[214,417],[213,412],[212,396],[211,384],[211,376],[211,369],[210,365],[210,355],[210,348],[210,344],[210,332],[211,325],[212,320],[213,311],[214,307],[215,303],[222,286],[223,282],[228,275],[230,269],[237,260],[243,248],[250,240],[254,234],[259,229],[266,222],[272,216],[277,211],[280,208],[286,204],[291,201],[295,197],[298,195],[302,193],[304,192],[307,191],[309,191],[313,190],[316,189],[318,189],[321,189],[330,189],[332,189],[336,189],[340,189],[345,189],[348,190],[352,190],[355,191],[359,192],[362,194],[365,195],[368,196],[372,199],[376,200],[379,202],[382,205],[385,207],[390,210],[393,213],[399,216],[402,219],[407,222],[410,224],[416,228],[419,231],[425,236],[428,238],[434,243],[437,245],[441,248],[447,252],[450,255],[454,259],[459,263],[462,266],[467,272],[470,276],[474,282],[478,288],[482,294],[486,302],[489,307],[492,312],[496,320],[497,323],[500,329],[502,336],[505,341],[506,346],[507,353],[509,358],[510,362],[512,367],[512,372],[513,377],[514,382],[515,386],[516,391],[516,397],[516,400],[516,406],[516,411],[516,414],[516,420],[516,425],[516,428],[516,432],[515,436],[514,440],[513,443],[510,449],[509,451],[506,456],[504,460],[500,466],[498,469],[493,475],[491,478],[487,482],[484,486],[482,490],[477,493],[474,496],[472,499],[469,502],[462,507],[456,512],[453,514],[449,516],[446,518],[444,519],[440,520],[436,521],[431,522],[422,523],[418,523],[415,523],[403,523],[398,523],[391,523],[379,523],[370,523],[366,523],[355,522],[348,521],[344,521],[335,519],[331,518],[329,517],[325,515],[322,513],[321,512],[317,510],[310,501],[308,499],[306,495],[303,492],[301,489],[299,486],[297,483],[294,480],[291,477],[289,474],[287,471],[283,465],[282,463],[280,459],[279,456],[277,451],[275,441],[273,428],[273,423],[273,416],[273,408],[273,402],[273,396],[273,390],[273,385],[273,380],[274,374],[276,367],[277,362],[279,355],[281,349],[283,343],[290,330],[293,323],[297,317],[300,313],[303,308],[310,299],[312,296],[315,294],[320,291],[322,291],[324,290],[327,289],[328,289],[332,289],[335,289],[338,289],[346,290],[355,291],[360,291],[364,292],[369,292],[373,292],[378,293],[381,294],[386,295],[390,296],[395,297],[399,299],[403,300],[407,303],[410,305],[413,308],[417,310],[421,313],[423,315],[428,320],[431,323],[433,327],[440,337],[443,341],[445,346],[447,350],[450,357],[452,361],[458,374],[462,381],[467,392],[468,395],[469,398],[471,407],[473,411],[474,415],[474,419],[474,421],[474,425],[474,428],[474,430],[474,433],[474,435],[473,438],[472,440],[470,442],[469,444],[468,446],[466,448],[465,449],[463,451],[462,453],[461,454],[459,455],[457,457],[456,458],[453,460],[451,461],[445,465],[440,468],[436,470],[433,472],[428,475],[425,476],[422,477],[418,480],[415,481],[411,482],[409,484],[407,484],[405,485],[403,486],[402,487],[400,487],[398,487],[397,488],[395,488],[393,488],[390,488],[387,488],[385,488],[383,488],[381,488],[377,487],[374,486],[373,486],[370,484],[368,483],[365,482],[362,480],[359,477],[356,475],[353,474],[350,471],[348,469],[345,467],[344,466],[342,464],[340,462],[338,459],[337,458],[336,456],[334,454],[333,452],[332,449],[331,447],[330,445],[329,443],[328,439],[327,437],[327,435],[326,431],[325,430],[324,426],[323,423],[322,421],[322,417],[321,414],[320,412],[320,408],[320,407],[320,404],[320,402],[320,400],[320,397],[320,397],[320,395],[322,390],[324,387],[326,385],[330,380],[332,377],[334,375],[338,370],[340,367],[346,362],[351,357],[355,354],[359,352],[363,350],[370,349],[371,348],[375,347],[381,347],[383,347],[386,346],[389,346],[391,345],[395,345],[398,346],[400,347],[401,347],[402,348],[403,349],[404,350],[406,351],[407,352],[408,353],[409,355],[411,357],[413,359],[414,360],[415,361],[416,363],[417,364],[419,365],[420,368],[421,369],[422,371],[425,377],[425,379],[426,380],[426,382],[427,385],[427,388],[427,391],[427,394],[427,397],[427,399],[427,400],[427,402],[427,404],[426,408],[425,409],[425,411],[424,413],[423,415],[423,416],[422,417],[422,417],[421,418],[420,419],[420,420],[419,421],[418,422],[416,423],[415,424],[414,425],[412,427],[411,427],[410,428],[409,429],[407,430],[406,430],[405,431],[403,432],[402,433],[401,433],[399,434],[398,434],[397,435],[395,435],[393,435],[390,436],[386,437],[384,437],[382,437],[378,437],[375,438],[373,438],[371,438],[370,438],[369,437],[368,437],[366,437],[364,436],[362,435],[362,435],[361,434],[360,433],[359,433],[358,432],[357,430],[356,430],[356,429],[355,427],[354,426],[354,425],[353,424],[352,421],[352,420],[352,418],[352,417],[352,414],[352,413],[352,412],[352,409],[352,407],[352,404],[352,403],[352,401],[352,400],[353,399],[354,397],[355,396],[358,393],[359,391],[360,390],[361,389],[361,388],[363,387],[363,387],[364,387],[364,386],[364,386],[365,386],[365,386],[366,385],[367,385],[370,385],[372,384],[374,384],[377,383],[379,382],[381,382],[383,381],[385,381],[386,381],[387,381],[388,381],[389,381],[390,381],[390,381],[391,381],[391,381],[392,381],[393,381],[393,382],[394,382],[394,382],[394,383],[395,383],[396,384],[396,384],[397,385],[397,385],[398,385],[398,386],[399,387],[400,387],[400,388],[400,389],[401,389],[401,390],[402,391],[402,392],[402,392],[402,392],[402,393],[402,394],[403,394],[403,394],[403,394],[403,395],[403,396],[403,396],[403,396],[403,397],[403,398],[403,398],[403,399],[403,399],[403,400],[403,400],[403,400],[403,401],[403,401],[403,402],[403,403],[402,403],[400,407],[399,408],[399,409],[398,411],[397,412],[397,412],[396,413],[396,413],[396,414],[395,414],[395,414],[394,414],[393,414],[392,416],[391,416],[389,416],[388,417],[385,418],[384,419],[382,420],[380,420],[379,421],[377,421],[376,422],[376,422],[374,422],[374,422],[373,422],[373,422],[372,422],[371,422],[371,422],[371,421],[371,421],[371,421],[370,421],[370,420],[370,420],[370,419],[370,419],[370,418],[369,417],[369,417],[369,417],[369,417],[369,416],[369,415],[369,415],[369,414],[369,413],[369,412],[369,412],[369,412],[369,412],[370,411],[370,411],[371,411],[371,410],[371,410],[372,409],[373,408],[374,408],[375,407],[376,407],[376,407],[376,406],[377,406],[377,406],[377,406],[377,406],[378,406],[378,405],[378,405],[379,405],[379,405],[379,405],[379,405],[380,405],[380,405],[380,405]]
runDrawing()

canvas.addEventListener("mousedown", function (e) {
    isDrawing = true;
    touched = true;
    reset()
})
canvas.addEventListener("mousemove", function (e) {
    if (!isDrawing) return
    ctx.fillRect(e.clientX, e.clientY, 2, 2);
    drawing.push([e.clientX, e.clientY]);
    draw()
})
canvas.addEventListener("mouseup", function (e) {
    runDrawing()
})
document.body.onkeyup = function (e) {
    if (e.keyCode == 32) {
        if (interval) {
            clearInterval(interval)
            interval = null
        } else interval = setInterval(draw, timeInterval)
    }
}
document.getElementById("lsd").onclick = function () {
    if (document.getElementById("lsd").classList.contains("active")) {
        document.getElementById("lsd").classList.remove("active");
        blackVal = 1;
    } else {
        document.getElementById("lsd").classList += " active";
        blackVal = 0.25;
    }
}

function drawPath(path) {
    if (path.length <= 1) return -1
    for (let i = 0; i < path.length - 1; i++) {
        // ctx.strokeStyle = "rgba(255,255,255," + i/path.length + ")"
        ctx.lineWidth = 0.5
        ctx.strokeStyle = "rgba(255,255,255," + 1 + ")"
        ctx.beginPath();
        ctx.moveTo(path[i][0], path[i][1]);
        ctx.lineTo(path[i + 1][0], path[i + 1][1]);
        ctx.stroke();
    }
}
function drawPath_blue(path) {
    drawPath(path)
    if (path.length <= 1) return -1
    for (let i = 0; i < path.length - 1; i++) {
        ctx.lineWidth = 4;
        let r = 0,
            g = 255 * (path.length - i) / path.length + 0.3,
            b = 255 * i / path.length,
            a = i / path.length
        if (g < 255 * 0.4) g = 255 * 0.4
        ctx.strokeStyle = "rgba(" + r + "," + g + "," + b + "," + a + ")"
        ctx.beginPath();
        ctx.moveTo(path[i][0], path[i][1]);
        ctx.lineTo(path[i + 1][0], path[i + 1][1]);
        ctx.stroke();
    }
}

function black(a = 1) {
    ctx.fillStyle = "rgba(" + 0 + "," + 0 + "," + 0 + "," + a + ")";
    ctx.fillRect(0, 0, canvas.width / 2, canvas.height / 2);
}

function epicycles(x, y, rotation, fourier) {
    for (let i = 0; i < fourier.length; i++) {
        let prevX = x;
        let prevY = y;
        let freq = fourier[i].freq;
        let radius = fourier[i].amp;
        let phase = fourier[i].phase;
        x += radius * Math.cos(freq * time + phase + rotation);
        y += radius * Math.sin(freq * time + phase + rotation);

        // ctx.lineWidth = 1;
        // ctx.strokeStyle = "rgba(255,255,255," + 0.5 + ")"
        // ctx.beginPath();
        // ctx.arc(prevX, prevY, radius/2, 0, 2 * Math.PI);
        // ctx.stroke();

        ctx.strokeStyle = "rgba(255,255,255," + 0.5 + ")"
        ctx.beginPath();
        ctx.moveTo(prevX, prevY);
        ctx.lineTo(x, y);
        ctx.stroke();
    }
    return [x, y];
}

function draw() {
    if (state == USER) {
        black();
        ctx.strokeStyle = "#FFF";
        drawPath(drawing)
    } else if (state == FOURIER) {
        black(blackVal);
        ctx.strokeStyle = "#FFF"
        drawPath(drawing)
        drawPath_blue(path)
        let v = epicycles(canvas.width / 4, canvas.height / 4, 0, fourier);
        path[path.length] = v
        time += TWO_PI / fourier.length;

        if (!touched) {
            ctx.fillStyle = "#FFF";
            ctx.font = "30px Arial";
            ctx.fillText("Slowly draw a big shape", window.innerWidth / 2 - 160, window.innerHeight / 2 - 100);
        }

        if (time > TWO_PI) {
            time = 0;
            path = [];
            runFourier()
        }
    }
}

